require("dotenv").config();
const express = require("express");
const bodyParser = require("body-parser");
const multer = require("multer");
const cors = require("cors");
const fs = require("fs");
const path = require("path");
const https = require("https");
const http = require("http");
const { Resend } = require("resend");

const app = express();

const resend = new Resend(process.env.RESEND_API_KEY);

// –ü–∞–ø–∫–∏
const distDir = path.join(__dirname, "dist", "weneedwax");
const uploadDir = path.join(__dirname, "uploads");

if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir, { recursive: true });
}

// CORS
app.use(
  cors({
    origin: [
      "https://weneedwax.com",
      "http://weneedwax.com",
      "http://localhost:4200",
    ],
  }),
);

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏–∫–∏ (Angular –±–∏–ª–¥)
app.use(express.static(distDir));

// Multer (–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤)
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + "-" + file.originalname);
  },
});
const upload = multer({ storage: storage });

// üì• –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
app.post("/upload", upload.single("file"), async (req, res) => {
  console.log("‚û°Ô∏è –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:", req.body);

  const newFormData = {
    title: req.body.title,
    artist: req.body.artist,
    genre: req.body.genre,
    year: req.body.year,
    condition: req.body.condition,
    price: req.body.price,
    uploadedAt: new Date().toISOString(),
    file: req.file ? req.file.filename : null,
  };

  const formsFilePath = path.join(uploadDir, "forms.json");
  let formsArray = [];

  if (fs.existsSync(formsFilePath)) {
    const fileData = fs.readFileSync(formsFilePath, "utf-8");
    try {
      formsArray = JSON.parse(fileData);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è forms.json:", error);
    }
  }

  formsArray.push(newFormData);

  fs.writeFile(
    formsFilePath,
    JSON.stringify(formsArray, null, 2),
    async (err) => {
      if (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–æ—Ä–º—ã:", err);
        return res.status(500).json({ message: "Failed to save form data" });
      }
      console.log("‚úÖ –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ forms.json");

      // üì¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —á–µ—Ä–µ–∑ Resend
      try {
        await resend.emails.send({
          from: "info@weneedwax.com",
          to: ["hey@weneedwax.com"],
          subject: `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ We Need Wax`,
          html: `
  <h2>New Submission</h2>
  <table style="border-collapse: collapse; width: 100%;">
    <tr><td style="border: 1px solid #ddd; padding: 8px;">Title</td><td style="border: 1px solid #ddd; padding: 8px;">${req.body.title}</td></tr>
    <tr><td style="border: 1px solid #ddd; padding: 8px;">Artist</td><td style="border: 1px solid #ddd; padding: 8px;">${req.body.artist}</td></tr>
    <tr><td style="border: 1px solid #ddd; padding: 8px;">Year</td><td style="border: 1px solid #ddd; padding: 8px;">${req.body.year}</td></tr>
    <tr><td style="border: 1px solid #ddd; padding: 8px;">Genre</td><td style="border: 1px solid #ddd; padding: 8px;">${req.body.genre}</td></tr>
    <tr><td style="border: 1px solid #ddd; padding: 8px;">Condition</td><td style="border: 1px solid #ddd; padding: 8px;">${req.body.condition}</td></tr>
    <tr><td style="border: 1px solid #ddd; padding: 8px;">Price</td><td style="border: 1px solid #ddd; padding: 8px;">${req.body.price}</td></tr>
  </table>
`,
        });
        console.log("üì¨ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
      } catch (emailError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:", emailError);
      }

      res.status(200).json({ message: "Upload successful" });
    },
  );
});

// üìú –§–æ–ª–±—ç–∫: –æ—Ç–¥–∞—ë–º Angular –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –º–∞—Ä—à—Ä—É—Ç
app.get("*", (req, res) => {
  res.sendFile(path.join(distDir, "index.html"));
});

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
const isProduction = process.env.NODE_ENV === "production";

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if (isProduction) {
  // üöÄ HTTPS —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
  const sslOptions = {
    key: fs.readFileSync("/etc/letsencrypt/live/weneedwax.com/privkey.pem"),
    cert: fs.readFileSync("/etc/letsencrypt/live/weneedwax.com/fullchain.pem"),
  };

  https.createServer(sslOptions, app).listen(443, () => {
    console.log("‚úÖ HTTPS —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 443");
  });

  // üåê HTTP –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ HTTPS
  http
    .createServer((req, res) => {
      res.writeHead(301, { Location: "https://" + req.headers.host + req.url });
      res.end();
    })
    .listen(80, () => {
      console.log("‚ÑπÔ∏è HTTP -> HTTPS —Ä–µ–¥–∏—Ä–µ–∫—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 80");
    });
} else {
  // üöÄ HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  const PORT = process.env.PORT || 3000;
  http.createServer(app).listen(PORT, () => {
    console.log(`‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  });
}
